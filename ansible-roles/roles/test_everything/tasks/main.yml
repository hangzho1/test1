# - name: Detect OS
#   shell: 
#     cmd: ". /etc/os-release; echo $ID"
#     executable: /bin/bash
#   register: os

# - name: Detect OS VERSION
#   shell: 
#     cmd: ". /etc/os-release; echo $VERSION_ID"
#     executable: /bin/bash
#   register: os_ver

# - block:
#     - debug:
#         msg: "{{ os }}"

#     - debug:
#         msg: "{{ os_ver }}"

#     - name: Create hugepage mount point
#       debug:
#         msg: "{{ kvm_hugepage_paths[item.split('/')[0]]['mount_path'] }}"
#       loop: "{{ kvm_hugepages.split(',') }}"


#     - name: Create hugepage mount point
#       debug:
#         msg: "{{ kvm_hugepage_paths[item.split('/')[0]] }}"
#       loop: "{{ kvm_hugepages.split(',') }}"

#     - debug:
#         msg: "{{ item }}"
#       loop: "{{ kvm_hugepages.split(',') }}"
#   when: kvm_hugepages != ""


    # - name: docker_auth_pass_keyring_dir
    #   shell:
    #     cmd:
    #       echo {{ pwd }}

    # - name: Record timing
    #   shell:
    #     cmd: |
    #       echo "k8s_setup_start: \"$(date -Ins)\"" > {{ wl_logs_dir}}/timing.yaml
    #       echo k8s_setup_start: $(date -Ins) >> {{ wl_logs_dir}}/timing.yaml
    #       # echo "k8s_setup_start: \"$(date -Ins)\"" >> {{ wl_logs_dir}}/timing.yaml
    #       # echo "k8s_setup_start: \"$(date -Ins)\"" >> {{ wl_logs_dir}}/timing.yaml
    #     executable: /bin/bash


# - name: detect if local provisioner already be installed or not
#   command: "kubectl get pods -A |grep local-volume-provisioner"
#   register: lsp_installed



# - name: Determine whether has been loaded
#   shell: |
#     lsmod | grep dlb
#   register: dlb_loaded
#   ignore_errors: true

# - debug:
#     msg: "dlb is loaded on this machine"
#   when: dlb_loaded.stdout != ""

# - block:
#     - name: install kernel module
#       shell: |
#         modprobe dlb2
#       register: kernel_dlb_installed
#       ignore_errors: true

#     - debug:
#         msg: "{{kernel_dlb_installed}}"

#     - debug:
#         msg: "no kernel dlb driver"
#       when: "'not found' in kernel_dlb_installed.stderr"
#   when: dlb_loaded.stdout == ""




- name: Wait for system to become reachable
  wait_for_connection:
    connect_timeout: 20
    sleep: 1
    delay: 1
    timeout: 1800

- name: reboot
  command: reboot
  async: 5
  poll: 0
  become: true

- name: wait for the machine to come back
  wait_for_connection:
    connect_timeout: 20
    sleep: 1
    delay: 15
    timeout: 1800
